{"ast":null,"code":"let e = e => \"object\" == typeof e && null != e && 1 === e.nodeType,\n  t = (e, t) => (!t || \"hidden\" !== e) && \"visible\" !== e && \"clip\" !== e,\n  n = (e, n) => {\n    if (e.clientHeight < e.scrollHeight || e.clientWidth < e.scrollWidth) {\n      let l = getComputedStyle(e, null);\n      return t(l.overflowY, n) || t(l.overflowX, n) || (e => {\n        let t = (e => {\n          if (!e.ownerDocument || !e.ownerDocument.defaultView) return null;\n          try {\n            return e.ownerDocument.defaultView.frameElement;\n          } catch (e) {\n            return null;\n          }\n        })(e);\n        return !!t && (t.clientHeight < e.scrollHeight || t.clientWidth < e.scrollWidth);\n      })(e);\n    }\n    return !1;\n  },\n  l = (e, t, n, l, i, o, r, d) => o < e && r > t || o > e && r < t ? 0 : o <= e && d <= n || r >= t && d >= n ? o - e - l : r > t && d < n || o < e && d > n ? r - t + i : 0,\n  i = e => {\n    let t = e.parentElement;\n    return null == t ? e.getRootNode().host || null : t;\n  };\nvar o = (t, o) => {\n  var r, d, h, f, u, s;\n  if (\"undefined\" == typeof document) return [];\n  let {\n      scrollMode: a,\n      block: c,\n      inline: g,\n      boundary: m,\n      skipOverflowHiddenElements: p\n    } = o,\n    w = \"function\" == typeof m ? m : e => e !== m;\n  if (!e(t)) throw new TypeError(\"Invalid target\");\n  let W = document.scrollingElement || document.documentElement,\n    H = [],\n    b = t;\n  for (; e(b) && w(b);) {\n    if (b = i(b), b === W) {\n      H.push(b);\n      break;\n    }\n    null != b && b === document.body && n(b) && !n(document.documentElement) || null != b && n(b, p) && H.push(b);\n  }\n  let v = null != (d = null == (r = window.visualViewport) ? void 0 : r.width) ? d : innerWidth,\n    y = null != (f = null == (h = window.visualViewport) ? void 0 : h.height) ? f : innerHeight,\n    E = null != (u = window.scrollX) ? u : pageXOffset,\n    M = null != (s = window.scrollY) ? s : pageYOffset,\n    {\n      height: x,\n      width: I,\n      top: C,\n      right: R,\n      bottom: T,\n      left: V\n    } = t.getBoundingClientRect(),\n    k = \"start\" === c || \"nearest\" === c ? C : \"end\" === c ? T : C + x / 2,\n    B = \"center\" === g ? V + I / 2 : \"end\" === g ? R : V,\n    D = [];\n  for (let e = 0; e < H.length; e++) {\n    let t = H[e],\n      {\n        height: n,\n        width: i,\n        top: o,\n        right: r,\n        bottom: d,\n        left: h\n      } = t.getBoundingClientRect();\n    if (\"if-needed\" === a && C >= 0 && V >= 0 && T <= y && R <= v && C >= o && T <= d && V >= h && R <= r) return D;\n    let f = getComputedStyle(t),\n      u = parseInt(f.borderLeftWidth, 10),\n      s = parseInt(f.borderTopWidth, 10),\n      m = parseInt(f.borderRightWidth, 10),\n      p = parseInt(f.borderBottomWidth, 10),\n      w = 0,\n      b = 0,\n      O = \"offsetWidth\" in t ? t.offsetWidth - t.clientWidth - u - m : 0,\n      X = \"offsetHeight\" in t ? t.offsetHeight - t.clientHeight - s - p : 0,\n      Y = \"offsetWidth\" in t ? 0 === t.offsetWidth ? 0 : i / t.offsetWidth : 0,\n      L = \"offsetHeight\" in t ? 0 === t.offsetHeight ? 0 : n / t.offsetHeight : 0;\n    if (W === t) w = \"start\" === c ? k : \"end\" === c ? k - y : \"nearest\" === c ? l(M, M + y, y, s, p, M + k, M + k + x, x) : k - y / 2, b = \"start\" === g ? B : \"center\" === g ? B - v / 2 : \"end\" === g ? B - v : l(E, E + v, v, u, m, E + B, E + B + I, I), w = Math.max(0, w + M), b = Math.max(0, b + E);else {\n      w = \"start\" === c ? k - o - s : \"end\" === c ? k - d + p + X : \"nearest\" === c ? l(o, d, n, s, p + X, k, k + x, x) : k - (o + n / 2) + X / 2, b = \"start\" === g ? B - h - u : \"center\" === g ? B - (h + i / 2) + O / 2 : \"end\" === g ? B - r + m + O : l(h, r, i, u, m + O, B, B + I, I);\n      let {\n        scrollLeft: e,\n        scrollTop: f\n      } = t;\n      w = Math.max(0, Math.min(f + w / L, t.scrollHeight - n / L + X)), b = Math.max(0, Math.min(e + b / Y, t.scrollWidth - i / Y + O)), k += f - w, B += e - b;\n    }\n    D.push({\n      el: t,\n      top: w,\n      left: b\n    });\n  }\n  return D;\n};\nexport { o as default };","map":{"version":3,"mappings":"AA6EA,IAAIA,IAAaC,KACD,mBAAPA,KAAyB,QAANA,KAA8B,MAAhBA,EAAGC;EAEzCC,IAAc,CAChBC,GACAC,QAEIA,KAA2C,aAAbD,MAId,cAAbA,KAAuC,WAAbA;EA0B/BE,IAAe,CAACL,GAAaI;IAC/B,IAAIJ,EAAGM,eAAeN,EAAGO,gBAAgBP,EAAGQ,cAAcR,EAAGS,aAAa;MACpE,QAAQC,iBAAiBV,GAAI;MAE/B,SAAYW,EAAMC,WAAWR,MAC7BF,EAAYS,EAAME,WAAWT,MAhBZJ;QACjB,QAbiBA;UACrB,KAAKA,EAAGc,kBAAkBd,EAAGc,cAAcC,aAClC;UAGL;YACK,SAAGD,cAAcC,YAAYC,YAGtC;UAAA,SAFSC;YACA,WACT;UAAA;QAAA,GAI4BjB;QAC5B,SAAKkB,MAKHA,EAAMZ,eAAeN,EAAGO,gBAAgBW,EAAMV,cAAcR,EAAGS;MAAA,GAU7CT,EAEpB;IAAA;IAEO;EAAA;EAWLmB,IAAe,CACjBC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,MAsBGF,IAAmBL,KAClBM,IAAiBL,KAClBI,IAAmBL,KAAsBM,IAAiBL,IAEpD,IA2CNI,KAAoBL,KAAsBO,KAAeL,KACzDI,KAAkBL,KAAoBM,KAAeL,IAE/CG,IAAmBL,IAAqBG,IA4C9CG,IAAiBL,KAAoBM,IAAcL,KACnDG,IAAmBL,KAAsBO,IAAcL,IAEjDI,IAAiBL,IAAmBG,IAGtC;EAGLI,IAAoBC;IACtB,IAAIC,IAASD,EAAQE;IACrB,OAAc,QAAVD,IACMD,EAAQG,cAA6BC,QAAQ,OAEhDH;EAAA;AAIT,QAAe,CAACI,GAAiBC;EArRjC;EAsRM,IAAoB,sBAAbC,UAET,OAAO;EAGT;MAAIC,YAAEA;MAAYC;MAAAC,QAAOA;MAAQC;MAAApC,4BAAUA;IAAAA,IACzC+B;IAIEM,IACkB,qBAAbD,IAA0BA,IAAYE,KAAcA,MAASF;EAElE,KAACzC,EAAUmC,IACP,UAAIS,UAAU;EAIlB,QAAmBP,SAASQ,oBAAoBR,SAASS;IAGzDC,IAAoB;IACpBC,IAAyBb;EAC7B,OAAOnC,EAAUgD,MAAWN,EAAcM,KAAS;IAKjD,IAHAA,IAASnB,EAAiBmB,IAGtBA,MAAWH,GAAkB;MAC/BE,EAAOE,KAAKD;MACZ;IACF;IAIY,QAAVA,KACAA,MAAWX,SAASa,QACpB5C,EAAa0C,OACZ1C,EAAa+B,SAASS,oBAMX,QAAVE,KAAkB1C,EAAa0C,GAAQ3C,MACzC0C,EAAOE,KAAKD,EAEhB;EAAA;EAOA,IAAIG,IAAgB,iCAAOC,uBAAP,MAAuBC,SAASC;IAChDC,IAAiB,iCAAOH,uBAAP,MAAuBI,UAAUC;IAGlDC,IAAY,aAAOC,kBAAWC;IAC9BC,IAAY,aAAOF,kBAAWG;IAAAC;MAGhCP,QAAQQ;MACRX,OAAOY;MACPC,KAAKC;MACLC,OAAOC;MACPC,QAAQC;MACRC,MAAMC;IAAAA,IACJtC,EAAOuC;IAGPC,IACQ,YAAVpC,KAA+B,cAAVA,IACjB4B,IACU,UAAV5B,IACAgC,IACAJ,IAAYH,IAAe;IAC7BY,IACS,aAAXpC,IACIiC,IAAaR,IAAc,IAChB,UAAXzB,IACA6B,IACAI;IAGFI,IAA+B;EAEnC,SAASC,IAAQ,GAAGA,IAAQ/B,EAAOgC,QAAQD,KAAS;IAClD,IAAI3D,IAAQ4B,EAAO+B;MAAAA;QAIftB,QAAEA;QAAAA,OAAQH;QAAOa;QAAAE,OAAKA;QAAAA,QAAOE;QAAQE;MAAAA,IACvCrD,EAAMuD;IAIR,IACiB,gBAAfpC,KACA6B,KAAa,KACbM,KAAc,KACdF,KAAgBhB,KAChBc,KAAelB,KACfgB,KAAaD,KACbK,KAAgBD,KAChBG,KAAcD,KACdH,KAAeD,GAGR;IAGL,QAAazD,iBAAiBQ;MAC9B6D,IAAaC,SAASC,EAAWC,iBAA2B;MAC5DC,IAAYH,SAASC,EAAWG,gBAA0B;MAC1DC,IAAcL,SAASC,EAAWK,kBAA4B;MAC9DC,IAAeP,SAASC,EAAWO,mBAA6B;MAEhEC,IAAsB;MACtBC,IAAuB;MAIvBC,IACF,iBAAiBzE,IACZA,EAAsB0E,cACtB1E,EAAsBV,cACvBuE,IACAM,IACA;MACFQ,IACF,kBAAkB3E,IACbA,EAAsB4E,eACtB5E,EAAsBZ,eACvB6E,IACAI,IACA;MAEFQ,IACF,iBAAiB7E,IAC0B,MAAtCA,EAAsB0E,cACrB,IACAxC,IAASlC,EAAsB0E,cACjC;MACFI,IACF,kBAAkB9E,IAC0B,MAAvCA,EAAsB4E,eACrB,IACAvC,IAAUrC,EAAsB4E,eAClC;IAEN,IAAIlD,MAAqB1B,GAIPuE,IADF,YAAVnD,IACYoC,IACK,UAAVpC,IACKoC,IAAcpB,IACT,cAAVhB,IACKnB,EACZyC,GACAA,IAAYN,GACZA,GACA6B,GACAI,GACA3B,IAAYc,GACZd,IAAYc,IAAcX,GAC1BA,KAIYW,IAAcpB,IAAiB,GAI9BoC,IADF,YAAXnD,IACaoC,IACK,aAAXpC,IACMoC,IAAezB,IAAgB,IAC1B,UAAXX,IACMoC,IAAezB,IAGf/B,EACbsC,GACAA,IAAYP,GACZA,GACA6B,GACAM,GACA5B,IAAYkB,GACZlB,IAAYkB,IAAeX,GAC3BA,IAMJyB,IAAcQ,KAAKC,IAAI,GAAGT,IAAc7B,IACxC8B,IAAeO,KAAKC,IAAI,GAAGR,IAAejC,QACrC;MAIHgC,IADY,YAAVnD,IACYoC,IAAcT,IAAMkB,IACf,UAAV7C,IACKoC,IAAcL,IAASkB,IAAeM,IACjC,cAAVvD,IACKnB,EACZ8C,GACAI,GACAd,GACA4B,GACAI,IAAeM,GACfnB,GACAA,IAAcX,GACdA,KAIYW,KAAeT,IAAMV,IAAS,KAAKsC,IAAkB,GAInEH,IADa,YAAXnD,IACaoC,IAAeJ,IAAOQ,IACjB,aAAXxC,IACMoC,KAAgBJ,IAAOnB,IAAQ,KAAKuC,IAAiB,IAChD,UAAXpD,IACMoC,IAAeR,IAAQkB,IAAcM,IAGrCxE,EACboD,GACAJ,GACAf,GACA2B,GACAM,IAAcM,GACdhB,GACAA,IAAeX,GACfA;MAIA;QAAAmC,YAAEA;QAAYC;MAAAA,IAAclF;MAEhCuE,IAAcQ,KAAKC,IACjB,GACAD,KAAKI,IACHD,IAAYX,IAAcO,GAC1B9E,EAAMX,eAAegD,IAASyC,IAASH,KAG3CH,IAAeO,KAAKC,IAClB,GACAD,KAAKI,IACHF,IAAaT,IAAeK,GAC5B7E,EAAMT,cAAc2C,IAAQ2C,IAASJ,KAKzCjB,KAAe0B,IAAYX,GAC3Bd,KAAgBwB,IAAaT,CAC/B;IAAA;IAEad,OAAK;MAAE5E,IAAIkB;MAAO+C,KAAKwB;MAAalB,MAAMmB;IAAAA,EACzD;EAAA;EAEO;AAAA;AAAA","names":["isElement","el","nodeType","canOverflow","overflow","skipOverflowHiddenElements","isScrollable","clientHeight","scrollHeight","clientWidth","scrollWidth","getComputedStyle","style","overflowY","overflowX","ownerDocument","defaultView","frameElement","e","frame","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","getParentElement","element","parent","parentElement","getRootNode","host","target","options","document","scrollMode","block","inline","boundary","checkBoundary","node","TypeError","scrollingElement","documentElement","frames","cursor","push","body","viewportWidth","visualViewport","width","_b","viewportHeight","height","_d","viewportX","window","_e","viewportY","_f","pageYOffset","targetHeight","targetWidth","top","targetTop","right","targetRight","bottom","targetBottom","left","targetLeft","getBoundingClientRect","targetBlock","targetInline","computations","index","length","borderLeft","parseInt","frameStyle","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","scrollbarWidth","offsetWidth","scrollbarHeight","offsetHeight","scaleX","scaleY","Math","max","scrollLeft","scrollTop","min"],"sources":["C:\\Users\\Liza\\Documents\\GitHub\\diplom-client\\client\\node_modules\\compute-scroll-into-view\\src\\index.ts"],"sourcesContent":["// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n/**\n * This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\n * @public\n */\nexport type ScrollMode = 'always' | 'if-needed'\n\n/** @public */\nexport interface Options {\n  /**\n   * Control the logical scroll position on the y-axis. The spec states that the `block` direction is related to the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode), but this is not implemented yet in this library.\n   * This means that `block: 'start'` aligns to the top edge and `block: 'end'` to the bottom.\n   * @defaultValue 'center'\n   */\n  block?: ScrollLogicalPosition\n  /**\n   * Like `block` this is affected by the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode). In left-to-right pages `inline: 'start'` will align to the left edge. In right-to-left it should be flipped. This will be supported in a future release.\n   * @defaultValue 'nearest'\n   */\n  inline?: ScrollLogicalPosition\n  /**\n   * This is a proposed addition to the spec that you can track here: https://github.com/w3c/csswg-drafts/pull/5677\n   *\n   * This library will be updated to reflect any changes to the spec and will provide a migration path.\n   * To be backwards compatible with `Element.scrollIntoViewIfNeeded` if something is not 100% visible it will count as \"needs scrolling\". If you need a different visibility ratio your best option would be to implement an [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n   * @defaultValue 'always'\n   */\n  scrollMode?: ScrollMode\n  /**\n   * By default there is no boundary. All the parent elements of your target is checked until it reaches the viewport ([`document.scrollingElement`](https://developer.mozilla.org/en-US/docs/Web/API/document/scrollingElement)) when calculating layout and what to scroll.\n   * By passing a boundary you can short-circuit this loop depending on your needs:\n   * \n   * - Prevent the browser window from scrolling.\n   * - Scroll elements into view in a list, without scrolling container elements.\n   * \n   * You can also pass a function to do more dynamic checks to override the scroll scoping:\n   * \n   * ```js\n   * let actions = compute(target, {\n   *   boundary: (parent) => {\n   *     // By default `overflow: hidden` elements are allowed, only `overflow: visible | clip` is skipped as\n   *     // this is required by the CSSOM spec\n   *     if (getComputedStyle(parent)['overflow'] === 'hidden') {\n   *       return false\n   *     }\n\n   *     return true\n   *   },\n   * })\n   * ```\n   * @defaultValue null\n   */\n  boundary?: Element | ((parent: Element) => boolean) | null\n  /**\n   * New option that skips auto-scrolling all nodes with overflow: hidden set\n   * See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\n   * @defaultValue false\n   * @public\n   */\n  skipOverflowHiddenElements?: boolean\n}\n\n/** @public */\nexport interface ScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nlet isElement = (el: any): el is Element =>\n  typeof el === 'object' && el != null && el.nodeType === 1\n\nlet canOverflow = (\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) => {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nlet getFrameElement = (el: Element) => {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nlet isHiddenByFrame = (el: Element): boolean => {\n  let frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nlet isScrollable = (el: Element, skipOverflowHiddenElements?: boolean) => {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    let style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nlet alignNearest = (\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) => {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nlet getParentElement = (element: Node): Element | null => {\n  let parent = element.parentElement\n  if (parent == null) {\n    return (element.getRootNode() as ShadowRoot).host || null\n  }\n  return parent\n}\n\n/** @public */\nexport default (target: Element, options: Options): ScrollAction[] => {\n  if (typeof document === 'undefined') {\n    // If there's no DOM we assume it's not in a browser environment\n    return []\n  }\n\n  let { scrollMode, block, inline, boundary, skipOverflowHiddenElements } =\n    options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  let checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  let scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  let frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = getParentElement(cursor)\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  let viewportWidth = window.visualViewport?.width ?? innerWidth\n  let viewportHeight = window.visualViewport?.height ?? innerHeight\n\n  // Newer browsers supports scroll[X|Y], page[X|Y]Offset is\n  let viewportX = window.scrollX ?? pageXOffset\n  let viewportY = window.scrollY ?? pageYOffset\n\n  let {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop\n      : block === 'end'\n      ? targetBottom\n      : targetTop + targetHeight / 2 // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2\n      : inline === 'end'\n      ? targetRight\n      : targetLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  let computations: ScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    let frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    let { height, width, top, right, bottom, left } =\n      frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    let frameStyle = getComputedStyle(frame)\n    let borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    let borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    let borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    let borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    let scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    let scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    let scaleX =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth === 0\n          ? 0\n          : width / (frame as HTMLElement).offsetWidth\n        : 0\n    let scaleY =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight === 0\n          ? 0\n          : height / (frame as HTMLElement).offsetHeight\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          viewportY,\n          viewportY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          viewportY + targetBlock,\n          viewportY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          viewportX,\n          viewportX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          viewportX + targetInline,\n          viewportX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + viewportY)\n      inlineScroll = Math.max(0, inlineScroll + viewportX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      let { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll = Math.max(\n        0,\n        Math.min(\n          scrollTop + blockScroll / scaleY,\n          frame.scrollHeight - height / scaleY + scrollbarHeight\n        )\n      )\n      inlineScroll = Math.max(\n        0,\n        Math.min(\n          scrollLeft + inlineScroll / scaleX,\n          frame.scrollWidth - width / scaleX + scrollbarWidth\n        )\n      )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}