{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n/* eslint-disable import/prefer-default-export */\nimport { defaultConfig, useToken as useInternalToken } from './internal';\nimport defaultAlgorithm from './themes/default';\nimport darkAlgorithm from './themes/dark';\nimport compactAlgorithm from './themes/compact';\n// ZombieJ: We export as object to user but array in internal.\n// This is used to minimize the bundle size for antd package but safe to refactor as object also.\n// Please do not export internal `useToken` directly to avoid something export unexpected.\n/** Get current context Design Token. Will be different if you are using nest theme config. */\nfunction useToken() {\n  var _useInternalToken = useInternalToken(),\n    _useInternalToken2 = _slicedToArray(_useInternalToken, 3),\n    theme = _useInternalToken2[0],\n    token = _useInternalToken2[1],\n    hashId = _useInternalToken2[2];\n  return {\n    theme: theme,\n    token: token,\n    hashId: hashId\n  };\n}\nexport default {\n  /** @private Test Usage. Do not use in production. */\n  defaultConfig: defaultConfig,\n  /** Default seedToken */\n  defaultSeed: defaultConfig.token,\n  useToken: useToken,\n  defaultAlgorithm: defaultAlgorithm,\n  darkAlgorithm: darkAlgorithm,\n  compactAlgorithm: compactAlgorithm\n};","map":{"version":3,"names":["_slicedToArray","defaultConfig","useToken","useInternalToken","defaultAlgorithm","darkAlgorithm","compactAlgorithm","_useInternalToken","_useInternalToken2","theme","token","hashId","defaultSeed"],"sources":["C:/Users/Liza/Documents/GitHub/diplom-client/node_modules/antd/es/theme/index.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n/* eslint-disable import/prefer-default-export */\nimport { defaultConfig, useToken as useInternalToken } from './internal';\nimport defaultAlgorithm from './themes/default';\nimport darkAlgorithm from './themes/dark';\nimport compactAlgorithm from './themes/compact';\n// ZombieJ: We export as object to user but array in internal.\n// This is used to minimize the bundle size for antd package but safe to refactor as object also.\n// Please do not export internal `useToken` directly to avoid something export unexpected.\n/** Get current context Design Token. Will be different if you are using nest theme config. */\nfunction useToken() {\n  var _useInternalToken = useInternalToken(),\n    _useInternalToken2 = _slicedToArray(_useInternalToken, 3),\n    theme = _useInternalToken2[0],\n    token = _useInternalToken2[1],\n    hashId = _useInternalToken2[2];\n  return {\n    theme: theme,\n    token: token,\n    hashId: hashId\n  };\n}\nexport default {\n  /** @private Test Usage. Do not use in production. */\n  defaultConfig: defaultConfig,\n  /** Default seedToken */\n  defaultSeed: defaultConfig.token,\n  useToken: useToken,\n  defaultAlgorithm: defaultAlgorithm,\n  darkAlgorithm: darkAlgorithm,\n  compactAlgorithm: compactAlgorithm\n};"],"mappings":"AAAA,OAAOA,cAAc,MAAM,0CAA0C;AACrE;AACA,SAASC,aAAa,EAAEC,QAAQ,IAAIC,gBAAgB,QAAQ,YAAY;AACxE,OAAOC,gBAAgB,MAAM,kBAAkB;AAC/C,OAAOC,aAAa,MAAM,eAAe;AACzC,OAAOC,gBAAgB,MAAM,kBAAkB;AAC/C;AACA;AACA;AACA;AACA,SAASJ,QAAQ,GAAG;EAClB,IAAIK,iBAAiB,GAAGJ,gBAAgB,EAAE;IACxCK,kBAAkB,GAAGR,cAAc,CAACO,iBAAiB,EAAE,CAAC,CAAC;IACzDE,KAAK,GAAGD,kBAAkB,CAAC,CAAC,CAAC;IAC7BE,KAAK,GAAGF,kBAAkB,CAAC,CAAC,CAAC;IAC7BG,MAAM,GAAGH,kBAAkB,CAAC,CAAC,CAAC;EAChC,OAAO;IACLC,KAAK,EAAEA,KAAK;IACZC,KAAK,EAAEA,KAAK;IACZC,MAAM,EAAEA;EACV,CAAC;AACH;AACA,eAAe;EACb;EACAV,aAAa,EAAEA,aAAa;EAC5B;EACAW,WAAW,EAAEX,aAAa,CAACS,KAAK;EAChCR,QAAQ,EAAEA,QAAQ;EAClBE,gBAAgB,EAAEA,gBAAgB;EAClCC,aAAa,EAAEA,aAAa;EAC5BC,gBAAgB,EAAEA;AACpB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}